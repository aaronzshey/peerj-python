41a42,46
> from Bio import Align
> from pathlib import Path
> from Bio.Align import substitution_matrices
> 
> nuc44_matrix = substitution_matrices.load("NUC.4.4")
130,133c135,137
< def needle_align_to_get_boundaries(f1,f2):
<     alignment_a_left = 0
<     alignment_b_left = 0
<     output_file_name = f1.split('.')[0] + f2.split('.')[0] + ".needle"
---
> def needle_align_to_get_boundaries(f1, f2):
>     asequence = Path(f1).read_text().strip()
>     bsequence = Path(f2).read_text().strip()
135,193c139,140
<     needle_cline = NeedleCommandline()
<     needle_cline.asequence = f1
<     needle_cline.bsequence = f2
<     needle_cline.gapopen = 10
<     needle_cline.gapextend= 0.5
<     needle_cline.outfile = output_file_name
<     print(needle_cline)
<     stdout, stderr = needle_cline()
<     print(stdout + stderr)
< 
<     #open the needle alignment output file and get boundaries
<     file = open(output_file_name)
<     file_lines = file.readlines()
<     file.close()
< 
<     for line in file_lines:
<         print(line, end="")
< 
<     alignment_a_squence_positions = []
<     alignment_b_squence_positions = []
< 
<     file = open(output_file_name)
< 
<     new_line1 = file.readline()
<     new_line2 = file.readline()
< 
<     while len(new_line2):
<         line_a = new_line1
<         line_b = new_line2
<         new_line2 = new_line2.strip()
<         
<         if (50*'|' in new_line2):
< 
<             line_b = file.readline()
<       
<             alignment_a_squence_line_str = line_a.strip()
<             alignment_b_squence_line_str = line_b.strip()
<             print("The beginning of excellent alignment is shown below.\n")
<             
<             alignment_a_squence_line_str_split = alignment_a_squence_line_str.split()
<             print(alignment_a_squence_line_str_split[0].ljust(5,' '),\
<                   alignment_a_squence_line_str_split[1],\
<                   alignment_a_squence_line_str_split[2].rjust(6,' '),\
<                   sep="")
<             alignment_b_squence_line_str_split = alignment_b_squence_line_str.split()
<             print(alignment_b_squence_line_str_split[0].ljust(5,' '),\
<                   alignment_b_squence_line_str_split[1],\
<                   alignment_b_squence_line_str_split[2].rjust(6,' '),\
<                   sep="")
<      
<             print("\n")
< 
<             alignment_a_left = int(alignment_a_squence_line_str.split()[0])
<             alignment_b_left = int(alignment_b_squence_line_str.split()[0])
<             break
<         else:
<             new_line1 = new_line2         #notice the skill here, we must go step by step through the lines
<             new_line2 = file.readline()
<     file.close()
---
>     # Define valid characters
>     valid_chars = set("ACGTN")
194a142,183
>     # Clean sequences
>     asequence = ''.join([char for char in asequence if char in valid_chars])
>     bsequence = ''.join([char for char in bsequence if char in valid_chars])
> 
>     # Initialize the aligner
>     aligner = Align.PairwiseAligner()
>     aligner.mode = "global"
>     aligner.open_gap_score = -10 
>     aligner.extend_gap_score = -0.5
>     aligner.substitution_matrix = nuc44_matrix
> 
>     # Perform the alignment
>     alignments = aligner.align(asequence, bsequence)
> 
>     '''
>     print(alignment)
>     GAACT
>     ||--|
>     GA--T
> 
>     alignment.aligned
>     (((0, 2), (4, 5)), ((0, 2), (2, 3)))
> 
>     note how this tells us the fifth element of the target sequence (4, 5)
>     is aligned to the third element of the query sequence (2, 3)
> 
>     We find the tuple with the greatest difference, representing the longest 
>     chunk of perfect alignment.
> 
>     We also arbitrarily pick the first alignment, because it probably is the best one
>     '''
>     aligned = alignments[0].aligned
> 
>     # Convert alignments into diffs
>     coord_diffs = list(map(lambda x: int(x[1] - x[0]), aligned[0]))
>     # Find index of greatest diff in coords, indicating longest excellent alignment chunk
>     max_diff_index = coord_diffs.index(max(coord_diffs))
> 
>     # Get left bounds from target (first aligned array) and query (second aligned array)
>     alignment_a_left = aligned[0][max_diff_index][0]
>     alignment_b_left = aligned[1][max_diff_index][0]
>     
195a185
> 
